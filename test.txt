TokenType.INT int
TokenType.ID x
TokenType.LBOX [
TokenType.NUM 10
TokenType.RBOX ]
TokenType.SEMI ;
TokenType.INT int
TokenType.ID minloc
TokenType.LPAREN (
TokenType.INT int
TokenType.ID a
TokenType.LBOX [
TokenType.RBOX ]
TokenType.COMA ,
TokenType.INT int
TokenType.ID low
TokenType.COMA ,
TokenType.INT int
TokenType.ID high
TokenType.RPAREN )
TokenType.LKEY {
TokenType.INT int
TokenType.ID i
TokenType.SEMI ;
TokenType.INT int
TokenType.ID x
TokenType.SEMI ;
TokenType.INT int
TokenType.ID k
TokenType.SEMI ;
TokenType.ID k
TokenType.EQ =
TokenType.ID low
TokenType.SEMI ;
TokenType.ID x
TokenType.EQ =
TokenType.ID a
TokenType.LBOX [
TokenType.ID low
TokenType.RBOX ]
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.ID low
TokenType.PLUS +
TokenType.NUM 1
TokenType.SEMI ;
TokenType.WHILE while
TokenType.LPAREN (
TokenType.ID i
TokenType.LT <
TokenType.ID high
TokenType.RPAREN )
TokenType.LKEY {
TokenType.IF if
TokenType.LPAREN (
TokenType.ID a
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.LT <
TokenType.ID x
TokenType.RPAREN )
TokenType.LKEY {
TokenType.ID x
TokenType.EQ =
TokenType.ID a
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.SEMI ;
TokenType.ID k
TokenType.EQ =
TokenType.ID i
TokenType.SEMI ;
TokenType.RKEY }
TokenType.ID i
TokenType.EQ =
TokenType.ID i
TokenType.PLUS +
TokenType.NUM 1
TokenType.SEMI ;
TokenType.RKEY }
TokenType.RETURN return
TokenType.ID k
TokenType.SEMI ;
TokenType.RKEY }
TokenType.VOID void
TokenType.ID sort
TokenType.LPAREN (
TokenType.INT int
TokenType.ID a
TokenType.LBOX [
TokenType.RBOX ]
TokenType.COMA ,
TokenType.INT int
TokenType.ID low
TokenType.COMA ,
TokenType.INT int
TokenType.ID high
TokenType.RPAREN )
TokenType.LKEY {
TokenType.INT int
TokenType.ID i
TokenType.SEMI ;
TokenType.INT int
TokenType.ID k
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.ID low
TokenType.SEMI ;
TokenType.WHILE while
TokenType.LPAREN (
TokenType.ID i
TokenType.LT <
TokenType.ID high
TokenType.MINUS -
TokenType.NUM 1
TokenType.RPAREN )
TokenType.LKEY {
TokenType.INT int
TokenType.ID t
TokenType.SEMI ;
TokenType.ID k
TokenType.EQ =
TokenType.ID minloc
TokenType.LPAREN (
TokenType.ID a
TokenType.COMA ,
TokenType.ID i
TokenType.COMA ,
TokenType.ID high
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.ID t
TokenType.EQ =
TokenType.ID a
TokenType.LBOX [
TokenType.ID k
TokenType.RBOX ]
TokenType.SEMI ;
TokenType.ID a
TokenType.LBOX [
TokenType.ID k
TokenType.RBOX ]
TokenType.EQ =
TokenType.ID a
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.SEMI ;
TokenType.ID a
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.EQ =
TokenType.ID t
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.ID i
TokenType.PLUS +
TokenType.NUM 1
TokenType.SEMI ;
TokenType.RKEY }
TokenType.RKEY }
TokenType.VOID void
TokenType.ID main
TokenType.LPAREN (
TokenType.VOID void
TokenType.RPAREN )
TokenType.LKEY {
TokenType.INT int
TokenType.ID i
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.NUM 0
TokenType.SEMI ;
TokenType.WHILE while
TokenType.LPAREN (
TokenType.ID i
TokenType.LT <
TokenType.NUM 10
TokenType.RPAREN )
TokenType.LKEY {
TokenType.ID x
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.EQ =
TokenType.ID input
TokenType.LPAREN (
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.ID i
TokenType.PLUS +
TokenType.NUM 1
TokenType.SEMI ;
TokenType.RKEY }
TokenType.ID sort
TokenType.LPAREN (
TokenType.ID x
TokenType.COMA ,
TokenType.NUM 0
TokenType.COMA ,
TokenType.NUM 10
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.NUM 0
TokenType.SEMI ;
TokenType.WHILE while
TokenType.LPAREN (
TokenType.ID i
TokenType.LT <
TokenType.NUM 10
TokenType.RPAREN )
TokenType.LKEY {
TokenType.ID output
TokenType.LPAREN (
TokenType.ID x
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.ID i
TokenType.PLUS +
TokenType.NUM 1
TokenType.SEMI ;
TokenType.RKEY }
TokenType.RKEY }
TokenType.ENDFILE 
