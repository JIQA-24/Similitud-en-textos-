TokenType.INT int
TokenType.ID main
TokenType.LPAREN (
TokenType.RPAREN )
TokenType.LKEY {
TokenType.ERROR !
TokenType.INT int
TokenType.ID x
TokenType.EQ =
TokenType.NUM 123
TokenType.SEMI ;
TokenType.INT int
TokenType.ID y
TokenType.EQ =
TokenType.NUM 123
TokenType.SEMI ;
TokenType.RETURN return
TokenType.NUM 0
TokenType.SEMI ;
TokenType.NUM 10
TokenType.IS ==
TokenType.NUM 40
TokenType.SEMI ;
TokenType.NUM 10
TokenType.EQ =
TokenType.NUM 20
TokenType.SEMI ;
TokenType.NUM 10
TokenType.LE <=
TokenType.NUM 20
TokenType.SEMI ;
TokenType.NUM 10
TokenType.GE >=
TokenType.NUM 20
TokenType.SEMI ;
TokenType.NE !=
TokenType.ID contador
TokenType.EQ =
TokenType.ID contador
TokenType.PLUS +
TokenType.NUM 3
TokenType.ID indice
TokenType.RKEY }
TokenType.INT int
TokenType.ID gcd
TokenType.LPAREN (
TokenType.INT int
TokenType.ID u
TokenType.COMA ,
TokenType.INT int
TokenType.ID v
TokenType.RPAREN )
TokenType.LKEY {
TokenType.IF if
TokenType.LPAREN (
TokenType.ID v
TokenType.IS ==
TokenType.ID O
TokenType.RPAREN )
TokenType.RETURN return
TokenType.ID u
TokenType.SEMI ;
TokenType.ELSE else
TokenType.RETURN return
TokenType.ID gcd
TokenType.LPAREN (
TokenType.ID v
TokenType.COMA ,
TokenType.ID u
TokenType.MINUS -
TokenType.ID u
TokenType.OVER /
TokenType.ID v
TokenType.TIMES *
TokenType.ID v
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.RKEY }
TokenType.VOID void
TokenType.ID main
TokenType.LPAREN (
TokenType.VOID void
TokenType.RPAREN )
TokenType.LKEY {
TokenType.INT int
TokenType.ID x
TokenType.SEMI ;
TokenType.INT int
TokenType.ID Y
TokenType.SEMI ;
TokenType.ID x
TokenType.ID input
TokenType.LPAREN (
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.ID Y
TokenType.ID input
TokenType.LPAREN (
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.ID output
TokenType.LPAREN (
TokenType.ID gcd
TokenType.LPAREN (
TokenType.ID x
TokenType.COMA ,
TokenType.ID y
TokenType.RPAREN )
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.RKEY }
TokenType.INT int
TokenType.ID x
TokenType.LBOX [
TokenType.NUM 01
TokenType.RBOX ]
TokenType.SEMI ;
TokenType.ID Int
TokenType.ID minloc
TokenType.LPAREN (
TokenType.INT int
TokenType.ID a
TokenType.LBOX [
TokenType.RBOX ]
TokenType.COMA ,
TokenType.INT int
TokenType.ID low
TokenType.COMA ,
TokenType.INT int
TokenType.ID high
TokenType.RPAREN )
TokenType.LKEY {
TokenType.INT int
TokenType.ID i
TokenType.SEMI ;
TokenType.INT int
TokenType.ID x
TokenType.SEMI ;
TokenType.INT int
TokenType.ID k
TokenType.SEMI ;
TokenType.ID k
TokenType.ID low
TokenType.SEMI ;
TokenType.ID x
TokenType.EQ =
TokenType.ID a
TokenType.LBOX [
TokenType.ID low
TokenType.RBOX ]
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.ID low
TokenType.PLUS +
TokenType.NUM 1
TokenType.SEMI ;
TokenType.WHILE while
TokenType.LPAREN (
TokenType.ID i
TokenType.LT <
TokenType.ID high
TokenType.RPAREN )
TokenType.LKEY {
TokenType.IF if
TokenType.LPAREN (
TokenType.ID a
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.LT <
TokenType.ID x
TokenType.RPAREN )
TokenType.LKEY {
TokenType.ID x
TokenType.EQ =
TokenType.ID a
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.SEMI ;
TokenType.ID k
TokenType.EQ =
TokenType.ID i
TokenType.SEMI ;
TokenType.RKEY }
TokenType.ID i
TokenType.EQ =
TokenType.ID i
TokenType.PLUS +
TokenType.NUM 1
TokenType.SEMI ;
TokenType.RKEY }
TokenType.RETURN return
TokenType.ID k
TokenType.SEMI ;
TokenType.RKEY }
TokenType.VOID void
TokenType.ID sort
TokenType.LPAREN (
TokenType.INT int
TokenType.ID a
TokenType.LBOX [
TokenType.RBOX ]
TokenType.COMA ,
TokenType.INT int
TokenType.ID low
TokenType.COMA ,
TokenType.INT int
TokenType.ID high
TokenType.RPAREN )
TokenType.LKEY {
TokenType.INT int
TokenType.ID i
TokenType.SEMI ;
TokenType.INT int
TokenType.ID k
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.ID low
TokenType.SEMI ;
TokenType.WHILE while
TokenType.LPAREN (
TokenType.ID i
TokenType.LT <
TokenType.ID high
TokenType.MINUS -
TokenType.NUM 1
TokenType.RPAREN )
TokenType.LKEY {
TokenType.ID k
TokenType.EQ =
TokenType.ID minloc
TokenType.LPAREN (
TokenType.ID a
TokenType.COMA ,
TokenType.ID i
TokenType.COMA ,
TokenType.ID high
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.ID t
TokenType.EQ =
TokenType.ID a
TokenType.LBOX [
TokenType.ID k
TokenType.RBOX ]
TokenType.SEMI ;
TokenType.ID a
TokenType.LBOX [
TokenType.ID k
TokenType.RBOX ]
TokenType.EQ =
TokenType.ID a
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.SEMI ;
TokenType.ID a
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.EQ =
TokenType.ID t
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.ID i
TokenType.PLUS +
TokenType.NUM 1
TokenType.SEMI ;
TokenType.RKEY }
TokenType.RKEY }
TokenType.VOID void
TokenType.ID main
TokenType.LPAREN (
TokenType.VOID void
TokenType.RPAREN )
TokenType.LKEY {
TokenType.INT int
TokenType.ID i
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.NUM 0
TokenType.SEMI ;
TokenType.WHILE while
TokenType.LPAREN (
TokenType.ID i
TokenType.LT <
TokenType.NUM 10
TokenType.RPAREN )
TokenType.LKEY {
TokenType.ID x
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.ID input
TokenType.LPAREN (
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.ID i
TokenType.PLUS +
TokenType.NUM 1
TokenType.SEMI ;
TokenType.RKEY }
TokenType.ID sort
TokenType.LPAREN (
TokenType.ID x
TokenType.COMA ,
TokenType.NUM 0
TokenType.COMA ,
TokenType.NUM 10
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.NUM 0
TokenType.SEMI ;
TokenType.WHILE while
TokenType.LPAREN (
TokenType.ID i
TokenType.LT <
TokenType.NUM 10
TokenType.RPAREN )
TokenType.LKEY {
TokenType.ID output
TokenType.LPAREN (
TokenType.ID x
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.ID i
TokenType.PLUS +
TokenType.NUM 1
TokenType.SEMI ;
TokenType.RKEY }
TokenType.RKEY }
TokenType.NUM 1
TokenType.PLUS +
TokenType.NUM 1
TokenType.ID n
TokenType.INT int
TokenType.NUM 1
TokenType.ID main
TokenType.LPAREN (
TokenType.VOID void
TokenType.RPAREN )
TokenType.LKEY {
TokenType.INT int
TokenType.ID i
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.NUM 0
TokenType.SEMI ;
TokenType.WHILE while
TokenType.LPAREN (
TokenType.ID i
TokenType.LT <
TokenType.NUM 10
TokenType.RPAREN )
TokenType.LKEY {
TokenType.ID x
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.ID input
TokenType.LPAREN (
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.ID i
TokenType.PLUS +
TokenType.NUM 1
TokenType.SEMI ;
TokenType.RKEY }
TokenType.ID sort
TokenType.ERROR "
TokenType.LPAREN (
TokenType.ID x
TokenType.COMA ,
TokenType.NUM 0
TokenType.COMA ,
TokenType.NUM 10
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.NUM 0
TokenType.SEMI ;
TokenType.WHILE while
TokenType.LPAREN (
TokenType.ID i
TokenType.LT <
TokenType.NUM 10
TokenType.RPAREN )
TokenType.LKEY {
TokenType.ID output
TokenType.LPAREN (
TokenType.ID x
TokenType.LBOX [
TokenType.ID i
TokenType.RBOX ]
TokenType.RPAREN )
TokenType.SEMI ;
TokenType.ID i
TokenType.EQ =
TokenType.ID i
TokenType.PLUS +
TokenType.NUM 1
TokenType.SEMI ;
TokenType.RKEY }
TokenType.RKEY }
TokenType.ERROR "
TokenType.NUM 1
TokenType.EQ =
TokenType.MINUS -
TokenType.EQ =
TokenType.NUM 1
TokenType.ENDFILE 
